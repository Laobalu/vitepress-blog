import{_ as e,c as a,o as t,a2 as o}from"./chunks/framework.DhS4kvOD.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"性能优化.md","filePath":"性能优化.md"}'),r={name:"性能优化.md"},s=o(`<h3 id="优化指标" tabindex="-1">优化指标 <a class="header-anchor" href="#优化指标" aria-label="Permalink to &quot;优化指标&quot;">​</a></h3><h4 id="性能指标web-vitals" tabindex="-1">性能指标Web Vitals <a class="header-anchor" href="#性能指标web-vitals" aria-label="Permalink to &quot;性能指标Web Vitals&quot;">​</a></h4><pre><code>FCP 首次内容绘制时间
LCP 最大内容绘制
FID 首次输入延时
TTI 完全达到可交互状态
TBT 总阻塞时间
</code></pre><h4 id="性能测试工具" tabindex="-1">性能测试工具 <a class="header-anchor" href="#性能测试工具" aria-label="Permalink to &quot;性能测试工具&quot;">​</a></h4><p>chorme devTool network网络请求加载信息 Coverage 网站运行，代码执行覆盖率 memory 分析内存占有，是否有内存泄漏 performance 性能监控 Lighthouse 给网页性能评分，并提供优化参考 webPageTest 在线测试，可以制定网络节点、硬件等</p><h2 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h2><p>减少DNS查找 重用TCP连接 压缩传输的资源 使用缓存 CDN 非核心代码异步加载 webpack性能调优，资源压缩合并</p><h2 id="渲染优化" tabindex="-1">渲染优化 <a class="header-anchor" href="#渲染优化" aria-label="Permalink to &quot;渲染优化&quot;">​</a></h2><p>css、js加载顺序优化 避免使用css @import 使用webWorker，处理大量计算场景 dom优化，减少dom操作 css优化 降低选择器复杂度，层级不超过三级 减少要计算样式的复杂度 比如用id、class代替标签选择器 不要使用通配符 使用BEM规范 eventLoop，vue的异步更新nextTick 回流 改变Dom的几何属性 改变dom树的结构 获取特定的属性值（及时计算） offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 重绘 样式变化但未改变几何属性</p>`,9),i=[s];function c(l,n,h,d,_,p){return t(),a("div",null,i)}const b=e(r,[["render",c]]);export{m as __pageData,b as default};
